services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:14-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: myapp
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      # Persist database data
      - postgres_data:/var/lib/postgresql/data
      # Initialize database with our schema
      - ./postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d myapp"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Express Application Service
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: express_app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8080
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: myapp
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # For logs
      - app_logs:/app/logs

  # React Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    networks:
      - app-network
    depends_on:
      - app
    environment:
      - REACT_APP_API_URL=http://localhost:8080/api

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local

# Custom network for service communication
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16